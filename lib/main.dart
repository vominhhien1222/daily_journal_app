import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:flutter/material.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:provider/provider.dart';
import 'package:timezone/data/latest.dart' as tz;
import 'package:permission_handler/permission_handler.dart';
import 'dart:io' show Platform;

import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart'; // ‚öôÔ∏è file t·ª± t·∫°o sau khi ch·∫°y flutterfire configure

import 'data/models/journal_entry.dart';
import 'data/hive_boxes.dart';
import 'providers/settings_provider.dart';
import 'providers/journal_provider.dart';
import 'core/notification_service.dart';
import 'app.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  try {
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );
    debugPrint("‚úÖ Firebase initialized successfully!");
  } catch (e) {
    debugPrint("‚ùå L·ªói khi kh·ªüi t·∫°o Firebase: $e");
  }

  // ‚úÖ Kh·ªüi t·∫°o Hive
  await Hive.initFlutter();
  if (!Hive.isAdapterRegistered(JournalEntryAdapter().typeId)) {
    Hive.registerAdapter(JournalEntryAdapter());
  }
  await HiveBoxes.openAll();

  // ‚úÖ Kh·ªüi t·∫°o timezone cho notification
  tz.initializeTimeZones();

  // ‚úÖ Xin quy·ªÅn notification (Android / iOS)
  if (!kIsWeb && (Platform.isAndroid || Platform.isIOS)) {
    final notiPermission = await Permission.notification.request();
    if (notiPermission.isDenied || notiPermission.isPermanentlyDenied) {
      debugPrint("‚ö†Ô∏è Ng∆∞·ªùi d√πng ch∆∞a c·∫•p quy·ªÅn th√¥ng b√°o.");
    }

    await NotificationService.instance.init();

    // üß≠ Test th√¥ng b√°o sau 1 ph√∫t
    try {
      final now = DateTime.now();
      await NotificationService.instance.scheduleDaily(
        hour: now.hour,
        minute: (now.minute + 1) % 60,
      );
      debugPrint("üïí ƒê√£ l√™n l·ªãch test notification sau 1 ph√∫t.");
    } catch (e) {
      debugPrint("‚ùå L·ªói khi test notification: $e");
    }
  }

  // ‚úÖ Ch·∫°y ·ª©ng d·ª•ng
  runApp(
    MultiProvider(
      providers: [
        ChangeNotifierProvider(
          create: (_) => SettingsProvider()..loadDefaults(),
        ),
        ChangeNotifierProvider(create: (_) => JournalProvider()..loadInitial()),
      ],
      child: const App(),
    ),
  );
}
